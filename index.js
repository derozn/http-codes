const scope = () => {
    const CODES = {};
    // create the root object which is referenced by the Proxy
    // HTTP status codes as of the HTTP/1.1 standard (RFC 7231)
    CODES.ACCEPTED = 202;
    CODES.BAD_GATEWAY = 502;
    CODES.BAD_REQUEST = 400;
    CODES.CONFLICT = 409;
    CODES.CONTINUE = 100;
    CODES.CREATED = 201;
    CODES.EXPECTATION_FAILED = 417;
    CODES.FAILED_DEPENDENCY  = 424;
    CODES.FORBIDDEN = 403;
    CODES.GATEWAY_TIMEOUT = 504;
    CODES.GONE = 410;
    CODES.HTTP_VERSION_NOT_SUPPORTED = 505;
    CODES.IM_A_TEAPOT = 418;
    CODES.INSUFFICIENT_SPACE_ON_RESOURCE = 419;
    CODES.INSUFFICIENT_STORAGE = 507;
    CODES.INTERNAL_SERVER_ERROR = 500;
    CODES.LENGTH_REQUIRED = 411;
    CODES.LOCKED = 423;
    CODES.METHOD_FAILURE = 420;
    CODES.METHOD_NOT_ALLOWED = 405;
    CODES.MOVED_PERMANENTLY = 301;
    CODES.MOVED_TEMPORARILY = 302;
    CODES.MULTI_STATUS = 207;
    CODES.MULTIPLE_CHOICES = 300;
    CODES.NETWORK_AUTHENTICATION_REQUIRED = 511;
    CODES.NO_CONTENT = 204;
    CODES.NON_AUTHORITATIVE_INFORMATION = 203;
    CODES.NOT_ACCEPTABLE = 406;
    CODES.NOT_FOUND = 404;
    CODES.NOT_IMPLEMENTED = 501;
    CODES.NOT_MODIFIED = 304;
    CODES.OK = 200;
    CODES.PARTIAL_CONTENT = 206;
    CODES.PAYMENT_REQUIRED = 402;
    CODES.PERMANENT_REDIRECT = 308;
    CODES.PRECONDITION_FAILED = 412;
    CODES.PRECONDITION_REQUIRED = 428;
    CODES.PROCESSING = 102;
    CODES.PROXY_AUTHENTICATION_REQUIRED = 407;
    CODES.REQUEST_HEADER_FIELDS_TOO_LARGE = 431;
    CODES.REQUEST_TIMEOUT = 408;
    CODES.REQUEST_TOO_LONG = 413;
    CODES.REQUEST_URI_TOO_LONG = 414;
    CODES.REQUESTED_RANGE_NOT_SATISFIABLE = 416;
    CODES.RESET_CONTENT = 205;
    CODES.SEE_OTHER = 303;
    CODES.SERVICE_UNAVAILABLE = 503;
    CODES.SWITCHING_PROTOCOLS = 101;
    CODES.TEMPORARY_REDIRECT = 307;
    CODES.TOO_MANY_REQUESTS = 429;
    CODES.UNAUTHORIZED = 401;
    CODES.UNPROCESSABLE_ENTITY = 422;
    CODES.UNSUPPORTED_MEDIA_TYPE = 415;
    CODES.USE_PROXY = 305;

    // the Proxy will throw an error if a unknown status is used
    // this saves an extra function call to see if object exists
    const httpCodes = new Proxy(CODES, {
        get: (target, property) => {
            if (property in target) {
                return target[property];
            } else {
                throw new Error("HTTP Code doesn't exist");
            }
        },
        // add the properties with references to the CODE object
        // this way we get autocomplete tooling for status codes
        ACCEPTED: CODES.ACCEPTED,
        BAD_GATEWAY: CODES.BAD_GATEWAY,
        BAD_REQUEST: CODES.BAD_REQUEST,
        CONFLICT: CODES.CONFLICT,
        CONTINUE: CODES.CONTINUE,
        CREATED: CODES.CREATED,
        EXPECTATION_FAILED: CODES.EXPECTATION_FAILED,
        FAILED_DEPENDENCY: CODES.FAILED_DEPENDENCY,
        FORBIDDEN: CODES.FORBIDDEN,
        GATEWAY_TIMEOUT: CODES.GATEWAY_TIMEOUT,
        GONE: CODES.GONE,
        HTTP_VERSION_NOT_SUPPORTED: CODES.HTTP_VERSION_NOT_SUPPORTED,
        IM_A_TEAPOT: CODES.IM_A_TEAPOT,
        INSUFFICIENT_SPACE_ON_RESOURCE: CODES.INSUFFICIENT_SPACE_ON_RESOURCE,
        INSUFFICIENT_STORAGE: CODES.INSUFFICIENT_STORAGE,
        INTERNAL_SERVER_ERROR: CODES.INTERNAL_SERVER_ERROR,
        LENGTH_REQUIRED: CODES.LENGTH_REQUIRED,
        LOCKED: CODES.LOCKED,
        METHOD_FAILURE: CODES.METHOD_FAILURE,
        METHOD_NOT_ALLOWED: CODES.METHOD_NOT_ALLOWED,
        MOVED_PERMANENTLY: CODES.MOVED_PERMANENTLY,
        MOVED_TEMPORARILY: CODES.MOVED_TEMPORARILY,
        MULTI_STATUS: CODES.MULTI_STATUS,
        MULTIPLE_CHOICES: CODES.MULTIPLE_CHOICES,
        NETWORK_AUTHENTICATION_REQUIRED: CODES.NETWORK_AUTHENTICATION_REQUIRED,
        NO_CONTENT: CODES.NO_CONTENT,
        NON_AUTHORITATIVE_INFORMATION: CODES.NON_AUTHORITATIVE_INFORMATION,
        NOT_ACCEPTABLE: CODES.NOT_ACCEPTABLE,
        NOT_FOUND: CODES.NOT_FOUND,
        NOT_IMPLEMENTED: CODES.NOT_IMPLEMENTED,
        NOT_MODIFIED: CODES.NOT_MODIFIED,
        OK: CODES.OK,
        PARTIAL_CONTENT: CODES.PARTIAL_CONTENT,
        PAYMENT_REQUIRED: CODES.PAYMENT_REQUIRED,
        PERMANENT_REDIRECT: CODES.PERMANENT_REDIRECT,
        PRECONDITION_FAILED: CODES.PRECONDITION_FAILED,
        PRECONDITION_REQUIRED: CODES.PRECONDITION_REQUIRED,
        PROCESSING: CODES.PROCESSING,
        PROXY_AUTHENTICATION_REQUIRED: CODES.PROXY_AUTHENTICATION_REQUIRED,
        REQUEST_HEADER_FIELDS_TOO_LARGE: CODES.REQUEST_HEADER_FIELDS_TOO_LARGE,
        REQUEST_TIMEOUT: CODES.REQUEST_TIMEOUT,
        REQUEST_TOO_LONG: CODES.REQUEST_TOO_LONG,
        REQUEST_URI_TOO_LONG: CODES.REQUEST_URI_TOO_LONG,
        REQUESTED_RANGE_NOT_SATISFIABLE: CODES.REQUESTED_RANGE_NOT_SATISFIABLE,
        RESET_CONTENT: CODES.RESET_CONTENT,
        SEE_OTHER: CODES.SEE_OTHER,
        SERVICE_UNAVAILABLE: CODES.SERVICE_UNAVAILABLE,
        SWITCHING_PROTOCOLS: CODES.SWITCHING_PROTOCOLS,
        TEMPORARY_REDIRECT: CODES.TEMPORARY_REDIRECT,
        TOO_MANY_REQUESTS: CODES.TOO_MANY_REQUESTS,
        UNAUTHORIZED: CODES.UNAUTHORIZED,
        UNPROCESSABLE_ENTITY: CODES.UNPROCESSABLE_ENTITY,
        UNSUPPORTED_MEDIA_TYPE: CODES.UNSUPPORTED_MEDIA_TYPE,
        USE_PROXY: CODES.USE_PROXY,
    });

    return httpCodes;
}

module.exports = scope();
